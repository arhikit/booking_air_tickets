// Code generated by MockGen. DO NOT EDIT.
// Source: homework/internal/service/tickets (interfaces: TicketsService)

// Package mock_tickets is a generated GoMock package.
package mock_tickets

import (
	context "context"
	tickets "homework/internal/domain/tickets"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTicketsService is a mock of TicketsService interface.
type MockTicketsService struct {
	ctrl     *gomock.Controller
	recorder *MockTicketsServiceMockRecorder
}

// MockTicketsServiceMockRecorder is the mock recorder for MockTicketsService.
type MockTicketsServiceMockRecorder struct {
	mock *MockTicketsService
}

// NewMockTicketsService creates a new mock instance.
func NewMockTicketsService(ctrl *gomock.Controller) *MockTicketsService {
	mock := &MockTicketsService{ctrl: ctrl}
	mock.recorder = &MockTicketsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketsService) EXPECT() *MockTicketsServiceMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockTicketsService) CreateTicket(arg0 context.Context, arg1 *tickets.ParamsCreateTicket) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockTicketsServiceMockRecorder) CreateTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockTicketsService)(nil).CreateTicket), arg0, arg1)
}

// GetTicketById mocks base method.
func (m *MockTicketsService) GetTicketById(arg0 context.Context, arg1 uuid.UUID) (*tickets.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketById", arg0, arg1)
	ret0, _ := ret[0].(*tickets.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketById indicates an expected call of GetTicketById.
func (mr *MockTicketsServiceMockRecorder) GetTicketById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketById", reflect.TypeOf((*MockTicketsService)(nil).GetTicketById), arg0, arg1)
}

// PayForTicket mocks base method.
func (m *MockTicketsService) PayForTicket(arg0 context.Context, arg1 *tickets.ParamsPayForTicket) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayForTicket", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayForTicket indicates an expected call of PayForTicket.
func (mr *MockTicketsServiceMockRecorder) PayForTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayForTicket", reflect.TypeOf((*MockTicketsService)(nil).PayForTicket), arg0, arg1)
}

// RegisterTicket mocks base method.
func (m *MockTicketsService) RegisterTicket(arg0 context.Context, arg1 *tickets.ParamsRegisterTicket) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTicket", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTicket indicates an expected call of RegisterTicket.
func (mr *MockTicketsServiceMockRecorder) RegisterTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTicket", reflect.TypeOf((*MockTicketsService)(nil).RegisterTicket), arg0, arg1)
}
