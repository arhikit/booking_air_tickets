// Package specs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package specs

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
)

// APIError defines model for APIError.
type APIError struct {
	// Код состояния HTTP
	HTTPStatusCode int `json:"HTTPStatusCode"`

	// Код ошибки
	Code string `json:"code"`

	// Сообщение об ошибке
	Message string `json:"message"`
}

// CreatedItem defines model for CreatedItem.
type CreatedItem struct {
	// ID созданного объекта
	Id string `json:"id"`
}

// Flight defines model for Flight.
type Flight struct {
	Airline struct {
		// Идентификатор самолета, выполняющего рейс
		AircraftId string `json:"aircraftId"`

		// Наименование самолета
		AircraftName string `json:"aircraftName"`

		// Идентификатор авиакомпании
		AirlineId string `json:"airlineId"`

		// Название авиакомпании
		AirlineName string `json:"airlineName"`
	} `json:"airline"`
	Arrival struct {
		// Идентификатор аэропорта прилета
		AirportId string `json:"airportId"`

		// Наименование аэропорта прилета
		AirportName string `json:"airportName"`

		// Идентификатор города прилета
		CityId string `json:"cityId"`

		// Наименование города прилета
		CityName string `json:"cityName"`
	} `json:"arrival"`

	// Признак наличия багажа
	BaggageIncluded bool `json:"baggageIncluded"`
	Date            struct {
		// Дата и время прилета
		Arrival time.Time `json:"arrival"`

		// Дата и время вылета
		Departure time.Time `json:"departure"`

		// Продолжительность полета в минутах
		Duration int `json:"duration"`
	} `json:"date"`
	Departure struct {
		// Идентификатор аэропорта вылета
		AirportId string `json:"airportId"`

		// Наименование аэропорта вылета
		AirportName string `json:"airportName"`

		// Идентификатор города вылета
		CityId string `json:"cityId"`

		// Наименование города вылета
		CityName string `json:"cityName"`
	} `json:"departure"`

	// Идентификатор рейса
	Id string `json:"id"`

	// Признак международного рейса
	IsInternational bool `json:"isInternational"`

	// Название рейса
	Name string `json:"name"`

	// Признак возможности перевоза животных
	PetAllowed bool `json:"petAllowed"`

	// Стоимость дополнительного багажа.
	PriceAdditionalBaggage int `json:"priceAdditionalBaggage"`

	// Стоимость выбора места.
	PriceSeatSelection int `json:"priceSeatSelection"`

	// Цены билетов в зависимости от класса места.
	PricesTickets []FlightPrice `json:"pricesTickets"`
}

// FlightPrice defines model for FlightPrice.
type FlightPrice struct {
	// Идентификатор класса места.
	ClassSeatsId string `json:"classSeatsId"`

	// Наименование класса места
	ClassSeatsName string `json:"classSeatsName"`

	// Количество свободных мест.
	CountVacantSeats int `json:"countVacantSeats"`

	// Стоимость билета.
	PriceTicket int `json:"priceTicket"`
}

// ParamsCreateTicket defines model for ParamsCreateTicket.
type ParamsCreateTicket struct {
	// Идентификатор класса места.
	ClassSeatsId string `json:"classSeatsId"`

	// Количество мест дополнительного багажа.
	CountAdditionalBaggage int `json:"countAdditionalBaggage"`

	// Идентификатор рейса.
	FlightId string `json:"flightId"`

	// Паспортные данные пассажира. Заполняется, если будет создаваться пассажир, а не выбираться существующий.
	IdentityDataPassenger *string `json:"identityDataPassenger,omitempty"`

	// ФИО пассажира. Заполняется, если будет создаваться пассажир, а не выбираться существующий.
	NamePassenger *string `json:"namePassenger,omitempty"`

	// Идентификатор пассажира. Заполняется, если выбран существующий пассажир, а не создается новый.
	PassengerId *string `json:"passengerId,omitempty"`

	// Идентификатор места в самолете. Заполняется, если при оформлении билета сразу покупается определенное место.
	SeatId *string `json:"seatId,omitempty"`

	// Идентификатор пользователя, выполняющего оформление билета.
	UserId string `json:"userId"`
}

// ParamsPayForTicket defines model for ParamsPayForTicket.
type ParamsPayForTicket struct {
	// Сумма бонусов для оплаты.
	PaidWithBonuses int `json:"paidWithBonuses"`

	// Идентификатор билета для оплаты.
	TicketId string `json:"ticketId"`

	// Идентификатор пользователя, выполняющего оплату билета.
	UserId string `json:"userId"`
}

// ParamsRefundTicket defines model for ParamsRefundTicket.
type ParamsRefundTicket struct {
	// Идентификатор билета для оплаты.
	TicketId string `json:"ticketId"`

	// Идентификатор пользователя, выполняющего возврат билета.
	UserId string `json:"userId"`
}

// ParamsRegisterTicket defines model for ParamsRegisterTicket.
type ParamsRegisterTicket struct {
	// Идентификатор места в самолете. Заполняется, если ранее при покупке билета не было выбрано определенное место.
	SeatId *string `json:"seatId,omitempty"`

	// Идентификатор билета.
	TicketId string `json:"ticketId"`

	// Идентификатор пользователя, выполняющего регистрацию на рейс.
	UserId string `json:"userId"`
}

// Seat defines model for Seat.
type Seat struct {
	// Идентификатор места в самолете
	Id string `json:"id"`

	// Номер места в самолете
	Number string `json:"number"`
}

// Ticket defines model for Ticket.
type Ticket struct {
	// Сумма бонусов, начисленных за билет.
	AccruedBonuses int `json:"accruedBonuses"`
	Flight         struct {
		// Наименование самолета
		Aircraft string `json:"aircraft"`

		// Название авиакомпании
		Airline string `json:"airline"`

		// Наименование аэропорта прилета
		ArrivalAirport string `json:"arrivalAirport"`

		// Наименование города прилета
		ArrivalCity string `json:"arrivalCity"`

		// Дата и время прилета
		ArrivalDate time.Time `json:"arrivalDate"`

		// Наименование аэропорта вылета
		DepartureAirport string `json:"departureAirport"`

		// Наименование города вылета
		DepartureCity string `json:"departureCity"`

		// Дата и время вылета
		DepartureDate time.Time `json:"departureDate"`

		// Продолжительность полета в минутах
		Duration int `json:"duration"`

		// Идентификатор рейса
		Id string `json:"id"`

		// Название рейса
		Name string `json:"name"`
	} `json:"flight"`

	// Идентификатор билета.
	Id string `json:"id"`

	// Сумма бонусов, использованных для оплаты билета.
	PaidWithBonuses int `json:"paidWithBonuses"`
	Passenger       struct {
		// Идентификатор пассажира.
		Id string `json:"id"`

		// Паспортные данные пассажира.
		IdentityData string `json:"identityData"`

		// ФИО пассажира.
		Name string `json:"name"`
	} `json:"passenger"`

	// Цена билета в рублях.
	Price int `json:"price"`
	Seat  struct {
		// Идентификатор класса места
		ClassSeatsId string `json:"classSeatsId"`

		// Наименование класса места
		ClassSeatsName string `json:"classSeatsName"`

		// Идентификатор места в самолете
		SeatId *string `json:"seatId,omitempty"`

		// Номер места в самолете
		SeatNumber *string `json:"seatNumber,omitempty"`
	} `json:"seat"`
	Status struct {
		// Наименование статуса
		Name string `json:"name"`

		// Дата и время установки статуса
		Timestamp time.Time `json:"timestamp"`
	} `json:"status"`
	User struct {
		// Идентификатор пользователя
		Id string `json:"id"`

		// Имя пользователя
		Name string `json:"name"`
	} `json:"user"`

	// Количество мест дополнительного багажа.
	СountAdditionalBaggage int `json:"сountAdditionalBaggage"`
}

// UpdatedItem defines model for UpdatedItem.
type UpdatedItem struct {
	// ID обновленного объекта
	Id string `json:"id"`
}

// User defines model for User.
type User struct {
	Balance struct {
		// Сумма бонусов.
		SumBonuses int `json:"sumBonuses"`

		// Сумма покупок.
		SumPurchases int `json:"sumPurchases"`
	} `json:"balance"`

	// Электронная почта пользователя
	Email string `json:"email"`

	// Идентификатор пользователя
	Id string `json:"id"`

	// Имя пользователя
	Name string `json:"name"`
}

// VacantSeats defines model for VacantSeats.
type VacantSeats struct {
	// Идентификатор класса места.
	ClassSeatsId string `json:"classSeatsId"`

	// Наименование класса места
	ClassSeatsName string `json:"classSeatsName"`

	// Количество свободных мест.
	CountVacantSeats int `json:"countVacantSeats"`

	// Свободные места на рейсе.
	Seats []Seat `json:"seats"`
}

// UUIDPathObjectID defines model for UUIDPathObjectID.
type UUIDPathObjectID string

// GetFlightsParams defines parameters for GetFlights.
type GetFlightsParams struct {
	// Идентификатор города вылета
	DepartureCityId string `json:"departureCityId"`

	// Идентификатор города прилета
	ArrivalCityId string `json:"arrivalCityId"`

	// Дата вылета
	DepartureDate openapi_types.Date `json:"departureDate"`
}

// CreateTicketJSONBody defines parameters for CreateTicket.
type CreateTicketJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/ParamsCreateTicket)
	ParamsCreateTicket `yaml:",inline"`
}

// PayForTicketJSONBody defines parameters for PayForTicket.
type PayForTicketJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/ParamsPayForTicket)
	ParamsPayForTicket `yaml:",inline"`
}

// RefundTicketJSONBody defines parameters for RefundTicket.
type RefundTicketJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/ParamsRefundTicket)
	ParamsRefundTicket `yaml:",inline"`
}

// RegisterTicketJSONBody defines parameters for RegisterTicket.
type RegisterTicketJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/ParamsRegisterTicket)
	ParamsRegisterTicket `yaml:",inline"`
}

// CreateTicketJSONRequestBody defines body for CreateTicket for application/json ContentType.
type CreateTicketJSONRequestBody CreateTicketJSONBody

// PayForTicketJSONRequestBody defines body for PayForTicket for application/json ContentType.
type PayForTicketJSONRequestBody PayForTicketJSONBody

// RefundTicketJSONRequestBody defines body for RefundTicket for application/json ContentType.
type RefundTicketJSONRequestBody RefundTicketJSONBody

// RegisterTicketJSONRequestBody defines body for RegisterTicket for application/json ContentType.
type RegisterTicketJSONRequestBody RegisterTicketJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список рейсов.
	// (GET /v1/flights)
	GetFlights(w http.ResponseWriter, r *http.Request, params GetFlightsParams)
	// Информация о свободных местах рейса.
	// (GET /v1/flights/vacant_seats/{id})
	GetFlightVacantSeats(w http.ResponseWriter, r *http.Request, id UUIDPathObjectID)
	// Информация о рейсе.
	// (GET /v1/flights/{id})
	GetFlightById(w http.ResponseWriter, r *http.Request, id UUIDPathObjectID)
	// Создание билета.
	// (POST /v1/tickets)
	CreateTicket(w http.ResponseWriter, r *http.Request)
	// Оплата билета.
	// (PUT /v1/tickets/pay)
	PayForTicket(w http.ResponseWriter, r *http.Request)
	// Возврат билета.
	// (PUT /v1/tickets/refund)
	RefundTicket(w http.ResponseWriter, r *http.Request)
	// Онлайн-регистрация билета.
	// (PUT /v1/tickets/register)
	RegisterTicket(w http.ResponseWriter, r *http.Request)
	// Информация о билете.
	// (GET /v1/tickets/{id})
	GetTicketById(w http.ResponseWriter, r *http.Request, id UUIDPathObjectID)
	// Информация о пользователе.
	// (GET /v1/users/{id})
	GetUserById(w http.ResponseWriter, r *http.Request, id UUIDPathObjectID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetFlights operation middleware
func (siw *ServerInterfaceWrapper) GetFlights(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlightsParams

	// ------------- Required query parameter "departureCityId" -------------
	if paramValue := r.URL.Query().Get("departureCityId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "departureCityId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "departureCityId", r.URL.Query(), &params.DepartureCityId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "departureCityId", Err: err})
		return
	}

	// ------------- Required query parameter "arrivalCityId" -------------
	if paramValue := r.URL.Query().Get("arrivalCityId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "arrivalCityId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "arrivalCityId", r.URL.Query(), &params.ArrivalCityId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "arrivalCityId", Err: err})
		return
	}

	// ------------- Required query parameter "departureDate" -------------
	if paramValue := r.URL.Query().Get("departureDate"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "departureDate"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "departureDate", r.URL.Query(), &params.DepartureDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "departureDate", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlights(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetFlightVacantSeats operation middleware
func (siw *ServerInterfaceWrapper) GetFlightVacantSeats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUIDPathObjectID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlightVacantSeats(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetFlightById operation middleware
func (siw *ServerInterfaceWrapper) GetFlightById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUIDPathObjectID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlightById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTicket operation middleware
func (siw *ServerInterfaceWrapper) CreateTicket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTicket(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PayForTicket operation middleware
func (siw *ServerInterfaceWrapper) PayForTicket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PayForTicket(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RefundTicket operation middleware
func (siw *ServerInterfaceWrapper) RefundTicket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefundTicket(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RegisterTicket operation middleware
func (siw *ServerInterfaceWrapper) RegisterTicket(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterTicket(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTicketById operation middleware
func (siw *ServerInterfaceWrapper) GetTicketById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUIDPathObjectID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTicketById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUIDPathObjectID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/flights", wrapper.GetFlights)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/flights/vacant_seats/{id}", wrapper.GetFlightVacantSeats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/flights/{id}", wrapper.GetFlightById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tickets", wrapper.CreateTicket)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/tickets/pay", wrapper.PayForTicket)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/tickets/refund", wrapper.RefundTicket)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/tickets/register", wrapper.RegisterTicket)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tickets/{id}", wrapper.GetTicketById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users/{id}", wrapper.GetUserById)
	})

	return r
}
